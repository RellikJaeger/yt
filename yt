#!/bin/bash

yt_version="version: v0.2.5, date: 2023/07/30 (Sun)"

# Function to display the version information
show_version() {
    echo ""
    echo "   yt $yt_version"
    echo ""
}

# Function to display the help information
show_help() {
    echo ""
    echo "----------------+-------------------------+-----------------------------------"
    echo " Commands       | Alias                   | Description"
    echo "----------------+-------------------------+-----------------------------------"
    echo " yt <url>       | 1080 <url>              | Download best mp4 (1080p to lower)"
    echo " yt 1080 <url>  |                         | Download 1080p mp4"
    echo " yt 720 <url>   |                         | Download 720p mp4"
    echo " yt 480 <url>   |                         | Download 480p mp4"
    echo " yt 360 <url>   |                         | Download 360p mp4"
    echo " yt mp3 <url>   |                         | Download best mp3"
    echo " yt help        | -h, --help              | To see this help page"
    echo " yt version     | -v, -version, --version | Check yt version"
    echo " yt upgrade     | -u, up                  | Upgrade yt (self-reinstallation)"
    echo "----------------+-------------------------+-----------------------------------"
}

# Function for video quality options
download_video() {
    local quality="$1"
    # shift
    local URLs="$*"
    
    if [ "$quality" != "mp3" ]; then
        mkdir -p "$HOME/Downloads/Video/"
        cd "$HOME/Downloads/Video/" || exit
    else
        mkdir -p "$HOME/Downloads/Music/"
        cd "$HOME/Downloads/Music/" || exit
    fi

    case "$quality" in
        "720")
			URLs="${URLs//720 /}"
            yt-dlp -o "%(title)s.%(ext)s" -f "22/best[ext=mp4]/best" --no-mtime "$URLs"
            ;;
        "480")
            URLs="${URLs//480 /}"
            yt-dlp -o "%(title)s.%(ext)s" -f "397+140/135+140/bestvideo[width\<=854][height\<=854][ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --no-mtime "$URLs"
            ;;
        "360")
            URLs="${URLs//360 /}"
            yt-dlp -o "%(title)s.%(ext)s" -f "134+140/18/best[ext=mp4]/best" --no-mtime "$URLs"
            ;;
        "240")
            echo "240p is not implemented."
            ;;
        "144")
            echo "144p is not implemented."
            ;;
        "mp3")
            URLs="${URLs//mp3 /}"
            yt-dlp --extract-audio --audio-format mp3 -o "%(title)s.%(ext)s" -f "bestaudio[ext=m4a]/bestaudio" --no-mtime "$URLs"
            ;;
        *)
            URLs="${URLs//1080 /}"
            yt-dlp -o "%(title)s.%(ext)s" -f "137+140/299+140/bestvideo[width\<=1920][height\<=1920][ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --no-mtime "$URLs"
            ;;
    esac
}

# Main script
if [ -z "$1" ]; then
    exit
fi

case "$1" in
    "-h" | "--help" | "help")
        show_help
        ;;
    "-v" | "version" | "-version" | "--version")
        show_version
        ;;
    "-u" | "up" | "upgrade")
        # Check if the script is running on macOS
        if [[ "$(uname)" == "Darwin" ]]; then
            # Inform the user about checking for Homebrew
            echo "Checking for Homebrew..."
            
            # Install Homebrew package manager if not already installed
            if ! command -v brew &>/dev/null; then
                NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            else
                echo "Homebrew is already installed. Checking for updates..."
                brew update
            fi
            
            # Install required packages
            brew install git phantomjs python ffmpeg
            cd "$HOME" || exit
            rm -rf "./yt/"
            git clone -b macOS https://github.com/RellikJaeger/yt
            mkdir -p "$HOME/.local/bin"
            mv "./yt/yt" "$HOME/.local/bin/yt"
            rm -rf "./yt/"
            python -m pip install --upgrade --force-reinstall yt-dlp
            echo ""
            clear
            show_version
            show_help
        else
            echo "Homebrew installation is only supported on macOS."
        fi
        ;;
    *)
        download_video "$@"
        ;;
esac
